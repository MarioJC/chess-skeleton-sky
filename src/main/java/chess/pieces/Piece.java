package chess.pieces;

import chess.Player;
import chess.Position;

/**
 * A base class for chess pieces
 */
public abstract class Piece {
    private final Player owner;

    protected Piece(Player owner) {
        this.owner = owner;
    }

    public char getIdentifier() {
        char id = getIdentifyingCharacter();
        if (owner.equals(Player.White)) {
            return Character.toLowerCase(id);
        } else {
            return Character.toUpperCase(id);
        }
    }

    public Player getOwner() {
        return owner;
    }

    protected abstract char getIdentifyingCharacter();

    /**
     * Generate valid positions for the piece and pass them to calling context
     * @param p initial position
     * @param processor
     */
    public abstract void generatePositions(Position p, StepProcessor processor);

    /**
     * Processor of positions generated by the piece
     */
    public interface StepProcessor {
        /**
         * Inform calling context about position candidate
         *
         * @param p position candidate
         * @return true if the position is not busy (helping in optimization)
         */
        boolean process(Position p);
    }
}
